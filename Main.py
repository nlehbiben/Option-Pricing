# -*- coding: utf-8 -*-# Importation des classes nÃ©cessaires.from ExcelInterface import ExcelInterfacefrom Market import Marketfrom Option import Optionfrom Model import Modelfrom Greeks import GreeksCalculatorfrom Convergence import Convergence# Chemin d'accÃ¨s au fichier Excel utilisÃ© comme interface.excel_path = "Excel_Projet_Python_VBA.xlsm"# Initialisation de l'interface Excel pour interagir avec le fichier Excel.interface = ExcelInterface(excel_path)# Lecture des donnÃ©es de configuration Ã  partir de la feuille Excel.data = interface.read_data()# CrÃ©ation des instances pour le marchÃ©, l'option et le modÃ¨le avec les donnÃ©es lues.market = Market(**{k: data[k] for k in ['r', 'vol', 's0', 'div', 'div_date']})option = Option(**{k: data[k] for k in ['option_type', 'type', 'strike', 'maturity']})model = Model(pricing_date=data['pricing_date'], nbsteps=data['nbsteps'], option=option, market=market)# Instanciation de la classe Convergence qui gÃ¨re l'exÃ©cution du modÃ¨le trinomial.convergence = Convergence(interface)# ExÃ©cution du modÃ¨le trinomial pour obtenir le prix de l'option.trinomial_price = convergence.run_trinomial()# ExÃ©cution du modÃ¨le Black-Scholes pour obtenir le prix et les Grecques de l'option.bs_result = convergence.run_black_scholes()bs_price = bs_result['Price']bs_greeks = bs_result['Greeks']# CrÃ©ation d'une instance du calculateur de Grecques pour l'option.greeks_calculator = GreeksCalculator(convergence)# ExÃ©cution des analyses de convergence#convergence_results_nbsteps = convergence.convergence_nbsteps()#convergence_results_strike = convergence.convergence_strike()# Enregistrement des rÃ©sultats de convergence dans Excel#interface.write_nbsteps_convergence_results(convergence_results_nbsteps)#interface.write_strike_convergence_results(convergence_results_strike)# Calcul des Grecques pour le modÃ¨le trinomial.trinomial_greeks = {    'Delta': greeks_calculator.calculate_delta(),    'Gamma': greeks_calculator.calculate_gamma(),    'Vega': greeks_calculator.calculate_vega(),    'Rho': greeks_calculator.calculate_rho(),    'Theta': greeks_calculator.calculate_theta()}# Pour le modèle trinomialinterface.write_trinomial_results(trinomial_result=trinomial_price, trinomial_greeks=trinomial_greeks)# Pour le modèle Black & Scholesinterface.write_black_scholes_results(bs_result=bs_result)# CrÃ©ation de l'instance GreeksCalculator avec l'objet Convergencegreeks_calculator = GreeksCalculator(convergence)